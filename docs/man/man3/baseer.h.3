.TH "baseer.h" 3 "Version 0.1.0" "Baseer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
baseer.h \- Core function\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <stdio\&.h>\fP
.br
\fR#include <stdlib\&.h>\fP
.br
\fR#include <sys/stat\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <assert\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <ctype\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBinputs\fP"
.br
.ti -1c
.RI "struct \fBbaseer_target_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBASEER_VERSION_MAJOR\fP   0"
.br
.ti -1c
.RI "#define \fBBASEER_VERSION_MINOR\fP   1"
.br
.ti -1c
.RI "#define \fBBASEER_VERSION_MICRO\fP   0"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(x)"
.br
.ti -1c
.RI "#define \fBTOSTRING\fP(x)"
.br
.ti -1c
.RI "#define \fBBASEER_VERSION\fP"
.br
.ti -1c
.RI "#define \fBBASEER_MAX_FILE_SIZE\fP   1024 * 1024 * 4"
.br
.ti -1c
.RI "#define \fBRETURN_NULL_IF\fP(con)"
.br
.ti -1c
.RI "#define \fBBASEER_BASE_OFFSET\fP(b,  i,  sf)"
.br
.ti -1c
.RI "#define \fBCOLOR_RESET\fP   '\\033[0m'"
.br
.ti -1c
.RI "#define \fBCOLOR_GREEN\fP   '\\033[1;32m'"
.br
.ti -1c
.RI "#define \fBCOLOR_BLUE\fP   '\\033[1;34m'"
.br
.ti -1c
.RI "#define \fBCOLOR_YELLOW\fP   '\\033[1;33m'"
.br
.ti -1c
.RI "#define \fBCOLOR_RED\fP   '\\033[1;31m'"
.br
.ti -1c
.RI "#define \fBCOLOR_MAGENTA\fP   '\\033[35m'"
.br
.ti -1c
.RI "#define \fBCOLOR_CYAN\fP   '\\033[36m'"
.br
.ti -1c
.RI "#define \fBCOLOR_RAND\fP(i,  c1,  c2)"
.br
.ti -1c
.RI "#define \fBBLOCK_LENGTH\fP   40"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct baseer_target_t \fBbaseer_target_t\fP"
.br
.ti -1c
.RI "typedef bool(* \fBbaseer_callback_t\fP) (\fBbaseer_target_t\fP *, void *arg)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBbaseer_target_t\fP * \fBbaseer_open\fP (char *file_path)"
.br
.ti -1c
.RI "void \fBbaseer_close\fP (\fBbaseer_target_t\fP *target)"
.br
.ti -1c
.RI "void \fBbaseer_print\fP (\fBbaseer_target_t\fP *target)"
.br
.ti -1c
.RI "bool \fBbaseer_execute\fP (\fBbaseer_target_t\fP *target, baseer_callback_t callback, void *arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Core function\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define BASEER_BASE_OFFSET( b,  i,  sf)"
\fBValue:\fP
.nf
(b) + ((i) * (sf))
.PP
.fi

.SS "#define BASEER_VERSION"
\fBValue:\fP
.nf
    TOSTRING(BASEER_VERSION_MAJOR) "\&." \\
    TOSTRING(BASEER_VERSION_MINOR) "\&." \\
    TOSTRING(BASEER_VERSION_MICRO)
.PP
.fi

.SS "#define COLOR_RAND( i,  c1,  c2)"
\fBValue:\fP
.nf
(i & 1)?c1:c2;
.PP
.fi

.SS "#define RETURN_NULL_IF( con)"
\fBValue:\fP
.nf
    if ((con))              \\
    {                       \\
        return NULL;        \\
    }
.PP
.fi

.SS "#define STRINGIFY( x)"
\fBValue:\fP
.nf
#x
.PP
.fi

.SS "#define TOSTRING( x)"
\fBValue:\fP
.nf
STRINGIFY(x)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for Baseer from the source code\&.
