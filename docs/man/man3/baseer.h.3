.TH "baseer.h" 3 "Version 0.1.0" "Baseer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
baseer.h \- Core function\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <stdio\&.h>\fP
.br
\fR#include <stdlib\&.h>\fP
.br
\fR#include <sys/stat\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <assert\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <ctype\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBbaseer_partition_t\fP"
.br
.ti -1c
.RI "struct \fBbaseer_target_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBASEER_VERSION\fP   1"
.br
.ti -1c
.RI "#define \fBBASEER_DEFAULT_PARTITION_COUNT\fP   8"
.br
.ti -1c
.RI "#define \fBBASEER_MAX_FILE_SIZE\fP   1024 * 1024 * 4"
.br
.ti -1c
.RI "#define \fBRETURN_NULL_IF\fP(con)"
.br
.ti -1c
.RI "#define \fBBASEER_BASE_OFFSET\fP(b,  i,  sf)"
.br
.ti -1c
.RI "#define \fBBASEER_BLOCK_OFFSET\fP(t,  i)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct baseer_target_t \fBbaseer_target_t\fP"
.br
.ti -1c
.RI "typedef struct baseer_partition_t \fBbaseer_partition_t\fP"
.br
.ti -1c
.RI "typedef bool(* \fBbaseer_partition_callback_t\fP) (\fBbaseer_target_t\fP *, unsigned int index, void *arg)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBbaseer_partition_t\fP * \fBbaseer_partitionize\fP (\fBbaseer_target_t\fP *target)"
.br
.ti -1c
.RI "void \fBbaseer_departitionize\fP (\fBbaseer_partition_t\fP *partitions)"
.br
.ti -1c
.RI "\fBbaseer_target_t\fP * \fBbaseer_open\fP (char *file_path, unsigned int partition_count)"
.br
.ti -1c
.RI "void \fBbaseer_close\fP (\fBbaseer_target_t\fP *target)"
.br
.ti -1c
.RI "void \fBbaseer_print\fP (\fBbaseer_target_t\fP *target)"
.br
.ti -1c
.RI "bool \fBbaseer_execute\fP (\fBbaseer_target_t\fP *target, baseer_partition_callback_t callback, void *arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Core function\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define BASEER_BASE_OFFSET( b,  i,  sf)"
\fBValue:\fP
.nf
(b) + ((i) * (sf))
.PP
.fi

.SS "#define BASEER_BLOCK_OFFSET( t,  i)"
\fBValue:\fP
.nf
BASEER_BASE_OFFSET(((t)\->block), (i), ((t)\->partition_size))
.PP
.fi

.SS "#define RETURN_NULL_IF( con)"
\fBValue:\fP
.nf
    if ((con))              \\
    {                       \\
        return NULL;        \\
    }
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for Baseer from the source code\&.
