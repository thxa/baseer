.TH "context" 3 "Version 0.2.0" "Baseer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
context \- Holds debugger state and process information\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <debugger\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "char * \fBmmaps\fP"
.br
.ti -1c
.RI "uint64_t \fBbase\fP"
.br
.ti -1c
.RI "uint64_t \fBentry\fP"
.br
.ti -1c
.RI "struct user_regs_struct \fBregs\fP"
.br
.ti -1c
.RI "\fBbp_list\fP * \fBlist\fP"
.br
.ti -1c
.RI "\fBsym_list\fP * \fBsym\fP"
.br
.ti -1c
.RI "\fBCmd\fP \fBcmd\fP"
.br
.ti -1c
.RI "unsigned int \fBpid\fP"
.br
.ti -1c
.RI "uint32_t \fBarch\fP"
.br
.ti -1c
.RI "bool \fBdo_wait\fP"
.br
.ti -1c
.RI "bool \fBpie\fP"
.br
.ti -1c
.RI "bool \fBdo_exit\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Holds debugger state and process information\&. 
.SH "Member Data Documentation"
.PP 
.SS "uint32_t context::arch"
Architecture (32 or 64 bit) 
.SS "uint64_t context::base"
Base address of the binary (PIE flag in LSB) 
.SS "\fBCmd\fP context::cmd"
Current user command 
.SS "bool context::do_exit"
Set when the debugger should terminate 
.SS "bool context::do_wait"
Whether to wait for process stop 
.SS "uint64_t context::entry"
Entry point address 
.SS "\fBbp_list\fP* context::list"
List of breakpoints 
.SS "char* context::mmaps"
Process memory mappings (/proc/pid/maps) 
.SS "unsigned int context::pid"
Debugged process PID 
.SS "bool context::pie"
True if the target binary is Position Independent Executable (PIE) 
.SS "struct user_regs_struct context::regs"
CPU register state 
.SS "\fBsym_list\fP* context::sym"
List of symbols 

.SH "Author"
.PP 
Generated automatically by Doxygen for Baseer from the source code\&.
