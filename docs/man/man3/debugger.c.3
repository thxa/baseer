.TH "modules/b_debugger/debugger.c" 3 "Version 0.1.0" "Baseer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
modules/b_debugger/debugger.c \- Functions to handle debugging binary and command logic\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <elf\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <ctype\&.h>\fP
.br
\fR#include 'udis86\&.h'\fP
.br
\fR#include <stdlib\&.h>\fP
.br
\fR#include <unistd\&.h>\fP
.br
\fR#include <fcntl\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <sys/mman\&.h>\fP
.br
\fR#include <sys/wait\&.h>\fP
.br
\fR#include 'debugger\&.h'\fP
.br
\fR#include <sys/ptrace\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBparse_cmd\fP (\fBcontext\fP *ctx)"
.br
.RI "Function to handle user commands\&. "
.ti -1c
.RI "bool \fBhandle_action\fP (\fBcontext\fP *ctx, void *args)"
.br
.RI "Function to handle command that don't need a function \&. "
.ti -1c
.RI "void \fBprint_helpCMD\fP ()"
.br
.RI "print the help commands \&. "
.ti -1c
.RI "\fBbp\fP * \fBfindBP\fP (\fBcontext\fP *ctx, uint64_t rip)"
.br
.RI "find a breakpoint that program hits\&. "
.ti -1c
.RI "bool \fBdelBP\fP (\fBcontext\fP *ctx, void *args)"
.br
.RI "delete a breakpoint\&. "
.ti -1c
.RI "bool \fBstep_over\fP (\fBcontext\fP *ctx, void *args)"
.br
.RI "function that do step over a function call\&. "
.ti -1c
.RI "bool \fBsetBP\fP (\fBcontext\fP *ctx, void *args)"
.br
.RI "set a breakpoint\&. "
.ti -1c
.RI "void \fBhandle_bpoint\fP (\fBcontext\fP *ctx)"
.br
.ti -1c
.RI "bool \fBlistBP\fP (\fBcontext\fP *ctx, void *args)"
.br
.ti -1c
.RI "void \fBrestore_all_BP\fP (\fBcontext\fP *ctx, int opt)"
.br
.ti -1c
.RI "void \fBdis_ctx\fP (\fBcontext\fP *ctx)"
.br
.ti -1c
.RI "void \fBinit_values\fP (\fBbparser\fP *target, \fBcontext\fP *ctx)"
.br
.ti -1c
.RI "void \fBdestroy_bp\fP (\fBbp\fP *bpoint)"
.br
.ti -1c
.RI "void \fBdestroy_all\fP (\fBcontext\fP *ctx)"
.br
.ti -1c
.RI "bool \fBb_debugger\fP (\fBbparser\fP *target, void *arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functions to handle debugging binary and command logic\&. 


.SH "Function Documentation"
.PP 
.SS "bool handle_action (\fBcontext\fP * ctx, void * args)"

.PP
Function to handle command that don't need a function \&. 
.PP
\fBParameters\fP
.RS 4
\fIctx\fP is the cpu status 
.RE
.PP

.SS "void parse_cmd (\fBcontext\fP * ctx)"

.PP
Function to handle user commands\&. 
.PP
\fBParameters\fP
.RS 4
\fIctx\fP is the cpu status 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Baseer from the source code\&.
